services:
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./myhadoop:/myhadoop
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env

  spark-master:
    build:
      context: ./spark_web
      dockerfile: Dockerfile
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./spark_web/notebooks:/app/notebooks
      - ./conf:/opt/hive/conf
    environment:
      - INIT_DAEMON_STEP=setup_spark

  spark-worker-1:
    build:
      context: ./spark_web
      dockerfile: Dockerfile.worker
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MASTER=spark://spark-master:7077

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,INTERNAL://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, INTERNAL://kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CREATE_TOPICS: "topic1:1:1,topic2:1:1"
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  python-producer:
    build: ./kafka_web
    container_name: python-producer
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: [ "python", "-u", "producer.py" ]

    restart: always

  # Service pour le consommateur
  python-consumer:

    build: ./kafka_web
    container_name: python-consumer
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: [ "python", "-u", "consumer.py" ]
    restart: always

  backend:
    build: ./web
    container_name: backend
    restart: always
    ports:
      - "5550:5550"
    volumes:
      - ./kafka_web:/app/kafka_web
    environment:
      - FLASK_ENV=development
    depends_on:
      - kafka
      - zookeeper

  hive-metastore:
    image: apache/hive:4.0.0
    container_name: hive-metastore
    ports:
      - "9083:9083"
    volumes:
      - ./conf:/opt/hive/conf
    environment:
      - SERVICE_NAME=metastore
    command: >
      bash -c "hive --service metastore"

  hive-server:
    image: apache/hive:4.0.0
    container_name: hive-server
    ports:
      - "10000:10000"
      - "10002:10002"
    volumes:
      - ./conf:/opt/hive/conf
    environment:
      - SERVICE_NAME=hiveserver2
      - HIVE_SITE_CONF=/opt/hive/conf
    command: >
      bash -c "hive --service hiveserver2 --hiveconf hive.metastore.uris=thrift://hive-metastore:9083"

  # jupyter-notebook:
  #   image: jupyter/pyspark-notebook
  #   container_name: jupyter-notebook
  #   ports:
  #     - "8888:8888"
  #   environment:
  #     - SPARK_MASTER=spark://spark-master:7077
  #   volumes:
  #     - ./spark_web/notebooks:/home/jovyan/work/
  #     - ./conf:/opt/hive/conf
  #     - ./checkpoints:/tmp/checkpoints
  #   depends_on:
  #     - spark-master
  #     - spark-worker-1
  #   command: start-notebook.sh --NotebookApp.token=''
  #   restart: always

  jupyter-notebook:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jupyter-notebook
    ports:
      - "8888:8888"
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    volumes:
      - ./spark_web/notebooks:/home/jovyan/work/
      - ./conf:/opt/hive/conf
      - ./checkpoints:/tmp/checkpoints
    depends_on:
      - spark-master
      - spark-worker-1
    command:
      - "start-notebook.sh"
      - "--NotebookApp.token=''"
    restart: always

volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
